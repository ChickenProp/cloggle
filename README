OVERVIEW

cloggle provides a Clojure interface to OpenGL through JOGL. Currently it is
very thin, and only the GL interface is implemented; there is no support for
GLAutoDrawable or the like.

A GL object can be interfaced with using the ctx macro, which initialises a
context for all calls to opengl functions which occur within its body. This is a
dynamic context, so it will be in effect for functions called from within the
body of ctx. The current context object can be accessed through the variable
opengl-context.

Within a context, functions and fields defined by opengl are exposed in the
obvious manner: GL_FIELD, (glFunc arg1 arg2 ...). Functions operate only on the
current context object; there is no way to pass a different one. But you can
make a new call to ctx, or just use the java interop to the JOGL API directly.

cloggle also provides the beg-end macro, which wraps its body between calls to
glBegin and glEnd.

Illustrative example (not working code):
    (use 'net.philh.cloggle)
    (def gl-obj (get-gl-object-somehow))
    (ctx gl-obj
      (glMatrixMode GL_PROJECTION)
      (glOrtho 0 300 0 300 1 128)
      (glMatrixMode GL_MODELVIEW)
      (glTranslated 0 0 -10)

      (glClear GL_DEPTH_BUFFER_BIT)
      (glClear GL_COLOR_BUFFER_BIT)
      (beg-end GL_TRIANGLES
        (glVertex3d 30 0 0)
        (glVertex3d 0 30 0)
        (glVertex3d 0 0 0)))

TYPECASTING

Any number type can be substituted for any other; it will be cast before passing
it to the method. Similarly, any array type can be substituted for any other,
and so can vectors and lists.

These calls will all have the same effect:

    (glVertex2i 5 10)
    (glVertex2iv (int-array [5 10] 0))
    (glVertex2f 5.5 10.7)
    (glVertex2iv (float-array [5.5 10.7] 0))
    (glVertex2iv [5 10] 0)
    (glVertex2iv '(5.5 10.7) 0)

(Note that JOGL functions expecting an array typically also take an offset
argument for the first element to use, so another equivalent call would be
(glVertex2iv [3 5 10] 1).

EXPORTS

The following symbols are provided, in addition to the standard gl* functions
and GL_* variables:

(beg-end mode body...)
Macro. Wraps body in calls to (glBegin mode) and (glEnd).

(texture-from-file file)
Function. Loads an image from file and returns a 2d RGBA texture representing
it.

(vertex points...)
(color values...)
Functions. Call the appropriate glFunction according to the provided arguments.
Accept sequences as well as individual arguments, so (vertex [1 2]) and
(vertex 1 2) are equivalent. vertex takes 2-4 arguments/seq indices, and color
takes 3-4.

BUGS

Currently unknown.

FUTURE PLANS

* Fix bugs.
* Rename functions and fields: glMatrixMode -> matrix-mode, GL_DEPTH_BUFFER_BIT
  -> depth-buffer-bit.
* When the 'same' function goes by multiple names, make it available under a
  catch-all (like with vertex, but for more of them).
* Add support for related interfaces, like GLAutoDrawable, GLEventListener and
  GLU.
* Should vertex only accept up to 3 arguments? I don't know if there's any
  reason to ever call glVertex4*, and it might screw things up if someone had
  a longer sequence than they expected.
